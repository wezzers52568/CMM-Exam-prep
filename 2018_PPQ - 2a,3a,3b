# -*- coding: utf-8 -*-
"""
Created on Sun Dec 10 18:30:17 2023

@author: lisan
"""
#2018
#Q1a


#Q1b/c - Taylor series

#2a - find general solution to differential equation
import sympy as sp 
import numpy as np
# Define the symbols
x, w, T_a, y_0 = sp.symbols('x,w,T_a, y_0')
y = sp.Function('y')(x)

# Define the differential equation
#sp.diff - function
#sp.Derivative - class 
y = (T_a/w)*sp.cosh((w/T_a)*x)+y_0-(T_a/w)
diff_eq = sp.diff(y,x)
diff2a_eq = sp.diff(y,x, x)
diff2b_eq = (w/T_a) *sp.sqrt((1+(sp.diff(y,x))**2))
 
# Find the general solution
solution_1 = sp.solve(diff2a_eq, x)
solution_2 = sp.solve(diff2b_eq, x)

# Display the general solution
print("General Solution:")
print(solution_2)
print(solution_1)

if solution_1 == solution_2:
    print('TRUE')
else: 
    print('FALSE')

#Q2b - asymptotic equation - use secant
import math

def secant(f,a,b,N):
    if f(a)*f(b) >= 0:
        print("Secant method fails.")
        return None
    a_n = a
    b_n = b
    for n in range(1,N+1):
        m_n = a_n - f(a_n)*(b_n - a_n)/(f(b_n) - f(a_n))
        f_m_n = f(m_n)
        if f(a_n)*f_m_n < 0:
            a_n = a_n
            b_n = m_n
        elif f(b_n)*f_m_n < 0:
            a_n = m_n
            b_n = b_n
        elif f_m_n == 0:
            print("Found exact solution.")
            return m_n
        else:
            print("Secant method fails.")
            return None
    return a_n - f(a_n)*(b_n - a_n)/(f(b_n) - f(a_n))

f = lambda T_a: (T_a/10)*sp.cosh((10/T_a)*50)-(T_a/10)-10
solution = secant(f,1000,1270,1000)
print(solution)

       
#Q3a 
def newton(f,Df,x0,epsilon,max_iter):
    xn = x0
    for n in range(0,max_iter):
        fxn = f(xn)
        if abs(fxn) < epsilon:
            print('Found solution after',n,'iterations.')
            return xn
        Dfxn = Df(xn)
        if Dfxn == 0:
            print('Zero derivative. No solution found.')
            return None
        xn = xn - fxn/Dfxn
    print('Exceeded maximum iterations. No solution found.')
    return None

f = lambda x: x**2+10*x+25
df= lambda x: 2*x +10
x0=1
epsilon=0.001
max_iter=1000000
solution = newton(f,df,x0,epsilon,max_iter)
print(solution)
 
#Q3b
def newton(f,Df,x0,epsilon,max_iter):
    xn = x0
    for n in range(0,max_iter):
        fxn = f(xn)
        if abs(fxn) < epsilon:
            print('Found solution after',n,'iterations.')
            return xn
        Dfxn = Df(xn)
        if Dfxn == 0:
            print('Zero derivative. No solution found.')
            return None
        xn = xn - fxn/Dfxn
    print('Exceeded maximum iterations. No solution found.')
    return None

f = lambda x: x**4+5*x**3+3*x**2-10
df= lambda x: 4*x**3+15*x**2+6*x
x0=1
epsilon=0.001
max_iter=1000000
solution = newton(f,df,x0,epsilon,max_iter)
print(solution)
